let restaurants,  neighborhoods,  cuisinesvar mapvar markers = []/** * Fetch neighborhoods and cuisines as soon as the page is loaded. */document.addEventListener('DOMContentLoaded', (event) => {  fetchNeighborhoods();  fetchCuisines();});/** * Fetch all neighborhoods and set their HTML. */fetchNeighborhoods = () => {  DBHelper.fetchNeighborhoods((error, neighborhoods) => {    if (error) { // Got an error      console.error(error);    } else {      self.neighborhoods = neighborhoods;      fillNeighborhoodsHTML();    }  });}/** * Set neighborhoods HTML. */fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {  const select = document.getElementById('neighborhoods-select');  neighborhoods.forEach(neighborhood => {    const option = document.createElement('option');    option.innerHTML = neighborhood;    option.value = neighborhood;    console.log(option);    select.appendChild(option);  });}/** * Fetch all cuisines and set their HTML. */fetchCuisines = () => {  DBHelper.fetchCuisines((error, cuisines) => {    if (error) { // Got an error!      console.error(error);    } else {      self.cuisines = cuisines;      fillCuisinesHTML();    }  });}/** * Set cuisines HTML. */fillCuisinesHTML = (cuisines = self.cuisines) => {  const select = document.getElementById('cuisines-select');  cuisines.forEach(cuisine => {    const option = document.createElement('option');    option.innerHTML = cuisine;    option.value = cuisine;    console.log(select);    select.appendChild(option);  });}/** * Initialize Google map, called from HTML. */window.initMap = () => {  let loc = {    lat: 40.722216,    lng: -73.987501  };  self.map = new google.maps.Map(document.getElementById('map'), {    zoom: 12,    center: loc,    scrollwheel: false,    title: "Map222 "/*CAMBIAR*/  });  updateRestaurants();}/** * Update page and map for current restaurants. */updateRestaurants = () => {  const cSelect = document.getElementById('cuisines-select');  const nSelect = document.getElementById('neighborhoods-select');  const cIndex = cSelect.selectedIndex;  const nIndex = nSelect.selectedIndex;  const cuisine = cSelect[cIndex].value;  const neighborhood = nSelect[nIndex].value;  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {    if (error) { // Got an error!      console.error(error);    } else {      resetRestaurants(restaurants);      fillRestaurantsHTML();    }  })}/** * Clear current restaurants, their HTML and remove their map markers. */resetRestaurants = (restaurants) => {  // Remove all restaurants  self.restaurants = [];  const ul = document.getElementById('restaurants-list');  ul.innerHTML = '';  // Remove all map markers  self.markers.forEach(m => m.setMap(null));  self.markers = [];  self.restaurants = restaurants;}/** * Create all restaurants HTML and add them to the webpage. */fillRestaurantsHTML = (restaurants = self.restaurants) => {  const ul = document.getElementById('restaurants-list');  restaurants.forEach(restaurant => {    ul.appendChild(createRestaurantHTML(restaurant));  });  addMarkersToMap();}/** * Create restaurant HTML. */createRestaurantHTML = (restaurant) => {  const li = document.createElement('li');/* Create picture for the principal image of each restaurant*/  const picture = document.createElement('picture');  const imgSrc = DBHelper.imageUrlForRestaurant(restaurant);  const source600 = document.createElement('source');  source600.media = "(max-width: 600px)";  source600.srcset = imgSrc + "_medium.jpg";    const image = document.createElement('img');  image.className = 'restaurant-img';  image.src = imgSrc + ".jpg";  image.setAttribute("alt", restaurant.textAlt);  picture.appendChild(source600);  picture.appendChild(image);    li.appendChild(picture);  const name = document.createElement('h2');  name.innerHTML = restaurant.name;  name.setAttribute("tabindex", 0);  li.appendChild(name);  const neighborhood = document.createElement('p');  neighborhood.innerHTML = restaurant.neighborhood;  neighborhood.setAttribute("tabindex", 0);  li.appendChild(neighborhood);  const address = document.createElement('p');  address.innerHTML = restaurant.address;  address.setAttribute("class", "address");  address.setAttribute("tabindex", 0);  li.appendChild(address);  const more = document.createElement('a');  more.innerHTML = 'View Details';  more.href = DBHelper.urlForRestaurant(restaurant);  more.setAttribute("alt", "View details of " + restaurant.name);  li.appendChild(more)  return li}/** * Add markers for current restaurants to the map. */addMarkersToMap = (restaurants = self.restaurants) => {  restaurants.forEach(restaurant => {    // Add marker to the map    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);    google.maps.event.addListener(marker, 'click', () => {      window.location.href = marker.url    });    self.markers.push(marker);  });}